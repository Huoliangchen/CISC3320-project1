#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include<sys/wait.h>
#include<sys/types.h>
#include<stdlib.h>
#include <sstream>
#include <iostream>

using namespace std;

char* user_feed(void){
	int status = 0;
	char* user_input = NULL;
	size_t buffer_size = 0;

	status = getline(&user_input, &buffer_size, stdin);

	if (status < 0){
		printf("Unable to get input!\nTry again");
		exit(status);
	}
	return user_input;
}


char** parser(char* str){
  size_t buff = 100;
	char** argv = (char**)malloc(sizeof(char*) * (buff));
	char* arg;
	int argv_position =0;

	if(!argv){
		printf("Error!\n");exit(-1);
	}

	arg = strtok(str," \t\a\n\r");

	while (arg != NULL){
		argv[argv_position] = arg;
		argv_position++;

		if (argv_position >= buff){
			printf("Exceeds size boundary!\n"); 	exit(-1);
		}
    
		arg = strtok(NULL," \t\a\n\r");
	}

	argv[argv_position] = NULL;
return argv;
}

int execute(char** str){
	 pid_t pid, wpid;
  	 int status;

  	 pid = fork();
  	 if(pid == 0){
  	 	
  	 	if(execvp(str[0], str) == -1 || pid<0)
  	 		printf("Failed to launch.\n"); 
	
  	 	exit(1); 
  	}

  	 else{
  	 	do{
  	 		wpid = waitpid(pid, &status, WUNTRACED);
  	 	}while (!WIFEXITED(status) && !WIFSIGNALED(status));
           pid = -1;
  	 }
  	 return 1;	
}

int user_exit (char** args){
  printf("Terminating shell!\n");
	exit(0);
}

int pwd_like (char** argv){
size_t buff_size = 100;
char *buf=(char *)malloc(sizeof(char) * 100);
	if (argv[1] != NULL){
	   getcwd(buf,buff_size);
     std::cout<<buf<<"\n";
	}
	return 1;
}

int change_directory (char** argv){
	int status;
	if (argv[1] != NULL){
		status = chdir(argv[1]);
		if (status == -1)
			printf("Check your path!\n");
	}
	return 1;
}

int exec_switch (char** args){

	int status;
	if (args[0] == NULL){
		return 1;
	}

	else if (strcmp(args[0],"cd") == 0){
		change_directory(args);
		return 1;
	}
  
 else if (strcmp(args[0],"pwd") == 0){
		pwd_like(args);
		return 1;
	}

	else if (strcmp(args[0], "exit") == 0){
		user_exit(args);
	}

	status = execute(args);
	return status;
}


int main(int argc, char const *argv[])
{
	char** args;
  char *line;
  int status =1;

	while(status){
    printf("g5shell>");
		line = user_feed();
    if(line!=NULL){
		args = parser(line);
		status = exec_switch(args);
    }
  }
  free(line);free(args);
	return 0;
}
